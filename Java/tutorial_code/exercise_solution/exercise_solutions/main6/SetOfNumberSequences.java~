package lab.main7;

import java.awt.*;
import java.util.ArrayList;
import gensim.*;

/**
 * Class containing multiple number sequences. Since this
 * implements ThingBeingSimulated, it needs to keep track of
 * the current step number, current value of each sequence etc.
 * as well as simply containing the sequences themselves.
 */
public class SetOfNumberSequences implements ThingBeingSimulated {

  private ArrayList theSequences;

  // Current step number
  private int n = 1;

  /** 
   * Constructor to create an empty SONS.
   */
  public SetOfNumberSequences() {
	theSequences = new ArrayList();
   }  
  
   /** 
   * Add a new sequence 
   */
  public void add(NumberSequence seq) {
    theSequences.add(seq);
  }  

  /**
  * Get the ith sequence
  */
  public NumberSequence get(int i) {
    return (NumberSequence)theSequences.get(i);
  }

  /**
  * The number of sequences currently in the set
  */
  public int numSequences() { return theSequences.size(); }

  /**
  * Show what all the sequences are
  */
  public String toString() {
    String result = "Number Sequences\n";
    for (int i=0; i<numSequences(); i++) 
      result += this.get(i) + "\n";
    return result;
  }  

  /**
  * Return an array of all the sequences
  */
  public NumberSequence[] getAll( ) {
     NumberSequence[] result = new NumberSequence[numSequences()];
    for (int i=0; i<numSequences(); i++) 
      result[i] = this.get(i);
    return result;
  }

  /** 
   * Throw away the sequences
   */
  public void clear() {
	theSequences.clear();
  }   
 
  /** 
   * Delete the last sequence added, if any.
   */
  public void deleteLast() {
	if (numSequences() > 0) theSequences.remove(numSequences()-1);
  }   
 
  // The methods required by the ThingBeingSimulated interface.

    // Dummy implementation of TBSView
   public void display(Graphics g) {  }    
  
  public void setBounds(int minX, int minY, int maxX, int maxY) {  }
    
  // Dummy implementation of TBSExtensions
  public void doApplicationSpecificActions(String s, SimulationFrame frame) {}    
    
  public void doApplicationSpecificInitialisation(SimulationFrame f) { }
 
    
  /**
   * Return an empty - not null - SONS
   */
  public ThingBeingSimulated emptyThing() {
	return new SetOfNumberSequences();
  }   
 
  /** 
   * Reset the step counter.
  */
  public void resetCounter() { 
	n = 1; 
  }  
  
  /** Perform a single step of simulation. Throws a SimulationExeption
   * if a SequenceRangeException occurs so that the user can be informed.
   */
  public void simstep() throws SimulationException {
	try {
	    for (int i = 0; i < numSequences(); i++) {
	      NumberSequence ithSequence = this.get(i);
		System.out.println( ithSequence + "[" + n + "] = " +
                                     ithSequence.valueAt(n));	
	  n++;
	    }
	}	
	catch (SequenceRangeException e) {
	  throw new SimulationException(e.getMessage() );
	}	
  }    
    
  /**
   * Return an example SONS, for demo purposes.
   */
  public ThingBeingSimulated typicalThing() {
      SetOfNumberSequences s = new SetOfNumberSequences();
      s.add(new ArithmeticProgression(1000,1000));
      s.add(new Fibonacci());
	return s;
  }    

  /**
  * Test program
  */
   public static void main( String[] args) {
      SetOfNumberSequences s = new SetOfNumberSequences();
      s.add(new ArithmeticProgression(1000,1000));
      s.add(new Fibonacci());
      s.add(new Primes());
      System.out.println(s);
   }

} // SetOfNumberSequences
